#!/bin/sh
# Author: Jozef Zuzelka
# TODO ked je zadany priecinok a je povolene zanorovanie a je prepinac tak vytiahnut vsetky subory pomocou find a potom zoradit
# TODO prepisat do pythonu s GUI
# TODO prerobit cykly cez subory na find
# find /Volumes/Data/Hudba/Albumy/ \( -iname '*.mp3' -o -iname '*.mp4' -o -iname '*.aac' \) -exec bash -x playAudio -r {} +
# FIXME blbne kontrola na audio subory pri povolenom zanorovani

function shuffle {
    local i tmp size max rand

    #$RANDOM % (i+1) is biased because of the limited range of $RANDOM
    #Compensate by using a range which is a multiple of the array size.
    size=${#array[*]}
    max=$(( 32768 / size * size ))
   
    for ((i=size-1; i>0; i--)); do
        while (( (rand=$RANDOM) >= max )); do :; done
        rand=$(( rand % (i+1) ))
        tmp=${array[i]} array[i]=${array[rand]} array[rand]=$tmp
    done
}

function playFile {
	BITRATE=$(afinfo "$1" | grep -o "bit rate: \d*" | sed "s/bit rate: //g;s/\([[:digit:]]*\)\([[:digit:]][[:digit:]][[:digit:]]\)/\1kb\/s/g")
	DURATION_SEC=$(afinfo "$1" | grep -o "duration: .*" | grep -o "\d\d*\." | sed s/[^[:digit:]]//g) # | awk '{print $0 / 60}')
	
	
	afplay -q 1 "$1" &
	PID=$!
    if [ ! -z "$DURATION_SEC" ]; then    # kvoli mp4 suborom, ktore neotvori afinfo
    	echo "$N. $1 [$BITRATE, `expr $DURATION_SEC / 60`m`expr $DURATION_SEC % 60`s] ($PID)"
    	#(PID) kvoli tomu ked ukonci s ^C tak ukonci cakanie na volbu, ale afplay stale bezi na pozadi
    else
    	echo "$N. $1 [$BITRATE, $DURATION_SEC] ($PID)"
    fi

	Q=
    if [ ! -z "$DURATION_SEC" ]; then    # kvoli mp4 suborom, ktore neotvori afinfo
        WAIT_TIME=`expr $DURATION_SEC + $DURATION_SEC / 10`    # DURATION + 10%
    else
        WAIT_TIME="400"
    fi
    START_TIME=`date +%s`
    
    while [ "$Q" != "T" ];do
		Q="T"
		#echo "Cakam ${WAIT_TIME}s na vstup"
        TMP=`awk 'BEGIN{srand();print int(rand()*(65535-50000))+50000 }'`
        x=$TMP
		read -t $WAIT_TIME x
		if [ "$x" == "n" ]; then                        # play the next one
			kill $PID 2>/dev/null
		elif [ "$x" == "pi" ]; then                     # pause immediatelly
            printf "Pri obnoveni znovu spustit aktualnu? [Y/n]: "
            read -t 5 op
            kill $PID 2>/dev/null
			echo "Prehravanie pozastavene."
			while [ "$x" != "c" ]; do
				printf "Zadajte 'c' pre pokracovanie: "
				read x
			done
            if [ -z "$op" -o "$op" == "y" -o "$op" == "Y" ]; then
	            afplay -q 1 "$1"
            fi
		elif [ "$x" == "p" ]; then                      # pause after actual one
			echo "Prehravanie sa pozastavi po aktualnej piesni."
            wait $PID 2>/dev/null
			while [ "$x" != "c" ]; do
				printf "Zadajte 'c' pre pokracovanie: "
				read x
			done
		elif [ "$x" == "l" ]; then                      # list a songs queue
            printf "Kolko nasledujucich piesni vypisat? [$COUNT]: "
            read op
            if [ -z "$op" ]; then
			    op=$COUNT
            fi
            for file in ${array[*]}
            do
                echo "$file"
            done
			wait $PID &>/dev/null
		elif [ "$x" == "r" ]; then                      # delete and play next one
            printf "Naozaj zmazat? [y/N]: "
            read op
            if [ "$op" == "y" -o "$op" == "Y" ]; then
			    kill $PID &>/dev/null
                mv "$1" ~/.Trash
            else
			    wait $PID &>/dev/null
            fi
		elif [ "$x" == "q" ]; then                      # quit immediatelly
			kill $PID 2>/dev/null
			exit 0
		elif [ "$x" == "t" -o "$x" == "$TMP" ]; then    # time exceeded
			wait $PID 2>/dev/null
        else
			#nebola platna volba- pokracujeme v cykleni
            WAIT_TIME=$(($DURATION_SEC-(`date +%s`-$START_TIME)))
			Q="F"
		fi
	done
}

function playDir {
    OLDIFS=$IFS
    IFS=$'\n'
    cd "$DIR"
    for file in `eval $CMD | head -n $COUNT`
    do 
    	if [ -d $file -a $RECURSIVE -eq 1 ]; then
            DIR="$file"
    		playDir
    	elif [ "$file" == "${file%.mp3}" -a "$file" == "${file%.mp4}" -a "$file" == "${file%.mpeg}" -a "$file" == "${file%.flv}" -a "$file" == "${file%.avi}" -a "$file" == "${file%.3gp}" -a "$file" == "${file%.aac}" -a "$file" == "${file%.wmv}" -a "$file" == "${file%.mkv}" ]; then
    		#find . -name "*.mp3" -o -name "*.ogg"
    		continue
    	fi
    
        playFile "$file"
    	N=`expr $N + 1`
    done
    cd - >/dev/null
    IFS=$OLDIFS
}


# ********** CHECK OPTION ************ 
OPT=1
if [ "$1" == "-h" -o "$1" == "--help" ]; then
    echo Prehrava hudobne subory z priecinku vybrateho po spusteni.
    echo "Zoradene podla:"
    echo "-t    casu [default]"
    echo "-s    velkosti"
    echo "-r    nahodne"
    echo "-a    abecedne"
    exit
elif [ "$1" == "-t" ]; then    # time
    CMD="ls -w1 -t"
elif [ "$1" == "-s" ]; then    # size
    CMD="ls -w1 -S"
elif [ "$1" == "-r" ]; then    # random
    #CMD="ls -w1 | sort -R"     # slow because it computes a hash for each line
    CMD="ls -w1 | shuf"
elif [ "$1" == "-a" ]; then    # alphabetical 
    CMD="ls -w1"
else
    CMD="ls -w1 -t"
    OPT=0
fi

mkdir -p ~/.Trash


# ************ IF NO FILES WERE SPECIFIED **************
DIROPT=0
if [ $# -eq 0 -o $# -eq 1 -a $OPT -eq 1 ]; then
    while true; do
        read -e -p "Zadajte priecinok [/Volumes/Data/Hudba/mp3]: " DIR
        eval cd "${DIR:=/Volumes/Data/Hudba/mp3}" 2>/dev/null
        if [ $? -eq 0 ];then
            break;
        else
            echo "Neplatny adresar, zadajte znovu."
        fi
    done
    DIROPT=1
fi

# *********** GET NUMBER OF SONGS TO PLAY *************
printf "Pocet poslednych pesniciek [100]: "
read COUNT
if [ -z $COUNT ]; then
	COUNT=100
fi

# ***********  *************
printf "Zanorovat sa do priecinkov? [y/N]: "
read RECURSIVE
if [ -z "$RECURSIVE" -o "$RECURSIVE" == "N" ]; then
	RECURSIVE=0
else
    RECURSIVE=1
fi


# ********** MAIN PROGRAM ************
echo
echo "+---------------------------------------------------------------------------+"
echo "  Prehravam poslednych $COUNT piesni z priecinku: '$DIR'                     "
echo "+---------------------------------------------------------------------------+"
echo "* Stlacte:                                                                  *"
echo "*  'n'    pre dalsiu piesen,                                                *"
echo "*  'p'    pre pozastavenie prehravania po aktualnej piesni,                 *"
echo "*  'pi'   pre okamzite pozastavenie prehravania,                            *"
echo "*  'l'    pre vypis fronty nasledujucich piesni,                            *"
echo "*  'r'    pre odstranenie prehravanej piesne,                               *"
echo "*  'q'    pre ukoncenie.                                                    *"
echo "*  ^C     pre ukoncenie po aktualnej piesni.                                *"
echo "*  't'    pre zrusenie cakania na volbu (v pripade zleho vypoctu).          *"
echo "*****************************************************************************"
echo

if [ $DIROPT -eq 0 ]; then
    N=1
    if [ $OPT -eq 1 ]; then
        # Skip option
        array=( "${@:2}" )
    else
        array=( "$@" )
    fi
    if [ $OPT -eq 1 -a "$1" == "-r" ];then
        echo "Prehadzujem argumenty.."
        shuffle
    fi
    # Cycle through files
    for file in "${array[@]}"
    do
        if [ -d "$file" ]; then
            DIR="$file"
            playDir
    	elif [ "$file" == "${file%.mp3}" -a "$file" == "${file%.mp4}" -a "$file" == "${file%.mpeg}" -a "$file" == "${file%.flv}" -a "$file" == "${file%.avi}" -a "$file" == "${file%.3gp}" -a "$file" == "${file%.aac}" -a "$file" == "${file%.wmv}" -a "$file" == "${file%.mkv}" ]; then
            echo "'$file' nie je audio subor ani priecinok."
            shift
            continue
        else
            playFile "$file"
    	    N=`expr $N + 1`
        fi
        shift
    done
else
    N=1
    playDir
fi
